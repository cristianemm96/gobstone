// EJERCICIO N°1
procedure DibujarBanda_EnDiagonalNEDe_x_(color, alto, largo){
    /*
        *Proposito: Dibuja una banda en diagonal, de color "color" y tamaño "alto"x"largo"
        *Parametros:
            *color: es el color con el cual se dibujara la banda
            *alto: es un numero que representa el alto de la banda.
            *largo: el un numero que representa el largo de la banda.
        *Precondicion: Hay al menos "largo"+1 celdas hacia el norte, y "alto"+1 celdas hacia el este.
        //LARGO + ALTO -1 AL NORTE
        //LARGO -1 CELDAS AL ESTE
    */
    DibujarUnaParteDeLaBanda(color, alto+1)
    VolverAlInicioDeLaParteDeLaBanda(largo-1)
    UbicarCabezalEnLaProximaParte()
    DibujarUnaParteDeLaBanda(color, alto+1)
    VolverAlInicioDeLaParteDeLaBanda(largo-1)
    UbicarCabezalEnLaProximaParte()
    DibujarUnaParteDeLaBanda(color, alto+1)
    VolverAInicial(largo+1, alto+1)
}


procedure DibujarUnaParteDeLaBanda(color, tamaño){
    /*
        *Proposito: Dibuja una linea que conforma una banda en diagonal de tamaño "tamaño", y color "color".
        *Parametros: 
            *color: Es el color con el cual se va a dibujar la linea.
            tamaño: Es el tamaño de la linea en diagonal.
        *Precondicion: hay almenos "tamaño" celdas hacia el norte, y "tamaño" celdas hacia el este.
    */
    repeat(tamaño){
        Poner(color)
        Mover(Este)
        Mover(Norte)
    }
    Poner(color)
}


procedure VolverAlInicioDeLaParteDeLaBanda(largoVuelta){
    /*
        *Proposito: Ubica el cabezal en el inicio de la parte de la banda dibujada.
        *Parametros:
            *largoVuelta: es un numero que indica la cantidad de celdas que debe volver el cabezal
            de forma diagonal.
        *Precondicion: hay al menos "largoVuelta" celdas hacia el Oeste, y las mismas hacia el Sur.
    */
    repeat(largoVuelta){
        Mover(Oeste)
        Mover(Sur)
    }
}


procedure VolverAInicial(altoDeVuelta, largoDeVuelta){
    /*
        *Proposito: Vuelve a la celda inicial, donde empieza la banda.
        *Parametros:
            *altoDeVuelta: es un numero que indica la cantidad de celdas que debe moverse el cabezal 
            en direccion sur
            *largoDeVuelta: es un numero que indica la cantidad de celdas que debe moverse el cabezal
            en direccion Oeste.
        *Precondicion: Hay al menos "altoDeVuelta" celdas hacia el Sur, y "largoDeVuelta" hacia el Oeste.
    */
    
    repeat(altoDeVuelta){
        Mover(Sur)
    }
    
    repeat(largoDeVuelta){
        Mover(Oeste)
    }
    
}

procedure UbicarCabezalEnLaProximaParte(){
    /*
        Proposito: Ubica el cabezal una celda hacia el norte para dibujar la proxima parte de la banda.
        Parametros: Hay al menos ua celda hacia el Norte.
    */
    Mover(Norte)
}

program{
    DibujarBanda_EnDiagonalNEDe_x_(Negro, 3, 5)
}

//EJERCICIO N° 2
procedure Mover_SegúnColor_(dirección,color){
    /*
        Proposito: Mueve el cabezal en direccion "direccion", dependiendo de la cantidad de colitas color 
        "color" que haya en la celda actual
        Parametros:
            *direccion: es la direccion en la cual se va a mover el cabezal. 
            *color: es un numero que indica la cantidad de celdas que se debe mover el cabezal.
        Precondicion: Debe haber al menos una bolita "color" en la celda actual, y "color" celdas
        hacia el "direccion".
    */
    repeat(nroBolitas(color)){
        Mover(dirección)
    }
  
}

//EJERCICIO N° 5
procedure PasarPalabraAMayuscula(numeroDeLetras){
    /*
        *Proposito: Pasa una palabra compuesta por numeroDeLetras letras en minusculas,
        a mayuscula.
        *Parametros:
            *numeroDeLetras: es un número que indica la cantidad de letras en minuscula
            que conforman la palabra.
        *Precondicion: Hay al menos una bolita roja en la celda actual. De lo contrario
        no habrían letras minusculas para convertirlas a mayuscula. Hay al menos
        numeroDeLetras en direccion Este desde la celda actual, y una hacia el norte desde
        la misma.
        *Observacion: la cantidad de letras se representan por las bolitas rojas en la celda
        inicial.
    */
    RecorrerPalabraYCambiarTipoDeLetra(numeroDeLetras, nroBolitas(Negro))
}

procedure RecorrerPalabraYCambiarTipoDeLetra(numeroDeLetras, letra){
    /*
        *Proposito: Recorre la palabra de numeroDeLetras letras, cambiando cada letra que
        la componen, de minuscula a mayuscula.
        *Parametros: 
            *numeroDeLetras: es un numero que indica la cantidad de letras que componen a
            la palabra.
            *letra: es un numero que indica la letra minuscula en codigo ASCII que debe 
            cambiarse a mayuscula.
        *Precondicion: Hay al menos una letra en la palabra, indicada en la celda inicial.
        Hay al menos numeroDeLetras letras hacia el este.
    */
    repeat(numeroDeLetras){
        IrALaProximaLetra()
        CambiarLasLetras(nroBolitas(Negro))
    }
}

procedure CambiarLasLetras(letra){
    /*
        *Proposito: cambia la letra actual de minuscula a mayuscula.
        *Parametros: 
            *letra: es un numero que indica la letra minuscula que es en codigo ASCII.
        *Precondicion: la letra mas pequeña a representar es la representada por
        el numero 32. Hay una celda hacia el norte desde la celda actual.
    */
    PosicionarEnCeldaAEscribir()
    CambiarLetra(letra)
    VolverAPalabraEnMinuscula()
}



procedure CambiarLetra(letra){
    /*
        Proposito: Coloca en la celda actual la letra mayuscula, de la letra representada
         en minuscula (en codigo ASCII) ubicada en la celda lindante hacia el sur.
        Parametros:
            *letra: es un numero que representa una letra en minuscula en codigo ASCII.
        Precondicion: la letra mas pequeña a representar es la representada por
        el numero 32.
    */
    repeat(letra-32){
       Poner(Negro)
   } 
}

procedure PosicionarEnCeldaAEscribir(){
    /*
        Proposito: Mueve el cabezal una celda en direccion norte, a donde se representara
        la letra en mayuscula, de la minuscula representada en la actual.
        Precondicion: Hay al menos una celda en direccion norte.
    */
    Mover(Norte)
}

procedure VolverAPalabraEnMinuscula(){
    /*
        Proposito: Mueve el cabezal una celda en direccion sur desde la celda actual.
        Precondicion: Hay al menos una celda en direccion sur.
    */
    Mover(Sur)
}

procedure IrALaProximaLetra(){
    /*
        Proposito: Mueve el cabezal hacia la proxima letra minuscula, en direccion Este.
        Precondicion: Debe haber al menos una celda en direccion Este, y una letra 
        representada en codigo ASCII en ella.
    */
    Mover(Este)
}

program{
    PasarPalabraAMayuscula(nroBolitas(Rojo))
}




program{
    Mover_SegúnColor_(Este, Negro)
}

//EJERCICIO N°8
/* REPRESENTACIÓN DEL DOMINIO
   - los virus se representan con bolitas Rojas, de 1 a 6 
   - una indicación de que la máquina de la celda actual no 
     tiene virus (indicación de OK) se representa con una 
     bolita Verde
   - el Hall del edificio en la celda 0,0 con la cantidad de 
     pisos representada por las bolitas Azules
   - el Hall del piso en la celda del borde Oeste de cada piso, 
     con la cantidad de máquinas del piso representada por las 
     bolitas Negras 
*/

program {
    RepararEdificio(nroBolitas(Azul))
}

procedure RepararEdificio(cantidadDePisos){
  /* 
     PROPÓSITO: 
       * reparar todas las máquinas del edificio. 
         El cabezal queda en el Hall del último piso 
         del edificio (el hall más al Norte)
     PRECONDICIONES: 
       * el cabezal debe estar en la hall del edificio
  */
    Subir1Piso()
    repeat(cantidadDePisos){
        RepararPiso(nroBolitas(Negro))
        VolverAlHallDelPiso(nroBolitas(Negro))
    }
    
}

procedure RepararPiso(cantidadDeMaquinas){
  /* 
     PROPÓSITO: 
       * reparar todas las máquinas del piso actual
         (sacando todos los Virus de las máquinas del piso)
     PRECONDICIONES: 
       * la celda actual es el Hall del piso
  */
  RepararMaquinasDelPiso(nroBolitas(Negro))
 
    }
    
    
    
    
}

procedure RepararMáquina(){
  /* 
     PROPÓSITO: 
       * eliminar los virus de la celda actual y dejar 
         la marca de OK 
     PRECONDICIONES: 
       * en la celda actual hay una máquina con virus
         y sin marcas de OK
  */
    SacarTodas_(Rojo)
    IndicarOk()
   
}

procedure IndicarOk() {
  /* 
     PROPÓSITO: 
       * indicar que la máquina de la celda actual no tiene 
         virus poniendo la indicación de OK
     PRECONDICIONES: 
       * la máquina de la celda actual no tiene virus ni 
         indicación de OK
  */
    Poner(Verde)
}

procedure SacarTodas_(colorASacar) {
  /*
     PROPÓSITO: 
       * sacar de la celda actual todas las bolitas 
         del color dado
     PRECONDICIONES: 
       * ninguna (es una operación total)
     PARÁMETROS:
       * colorASacar es un color, que indica el color 
          de las bolitas que se deben sacar
  */
    repeat(nroBolitas(colorASacar)){
        Sacar(colorASacar)
    }
}

procedure PasarAOtraMaquina(){
         Mover(Este)
}


procedure Subir1Piso(){
    Mover(Norte)
}

procedure VolverAlHallDelPiso(maquinas){
    repeat(maquinas){
        Mover(Oeste)
    }
}

//EJERCICIO N° 4
procedure Poner_Semillas(cantidadDeSemillasAPoner){
    /*
        Proposito: Pone cantidadDeSemillasAPoner semillas en la parcela actual.
        Parametros: 
            *cantidadDeSemillasAPoner: es un numero que representa la cantidad de semillas
            que se pondran en la celda actual.
        Precondicion: No hay ninguna semilla en la parcela actual.
        Observaciones: una bolita roja representa una semilla.
    */
    repeat(cantidadDeSemillasAPoner){
        Poner(Rojo)
    }
}

procedure Sacar_Semillas(cantidadDeSemillasASacar) {
    /*
        Proposito: saca cantidadDeSemillasASacar de la parcela actual.
        Parametros: 
            *cantidadDeSemillasASacar: es un numero que representa la cantidad de semillas
            que se deben sacar de la parcela actual.
        Precondicion: Ninguna.
    */
}

procedure Poner_Árboles(cantidadDeÁrbolesAPoner){
    /*
        *Proposito: Pone cantidadDeÁrbolesAPoner en la parcela actual. 
        *Parametros:
            *cantidadDeÁrbolesAPoner: es un numero que representa la cantidadd de arboles
            a poner.
        *Precondicion: No hay ningun arbol en la parcela actual.
        *Observaciones: Una bolita verde representa un arbol.
    */
}

procedure Sacar_Árboles(cantidadDeÁrbolesASacar){
    /*
        *Proposito: Saca cantidadDeÁrbolesASacar de la parcela actual.
        *Parametros: 
            *cantidadDeÁrbolesASacar: es un numero que representa la cantidad de arboles
            que se quitaran de la parcela actual.
        *Precondicion: Ninguna.
    */
}

procedure PonerBomba(){
    /*
        *Proposito: Pone una bomba en la celda actual.
        *Precondicion: No hay ninguna bomba en la parcela actual.
        *Observacion: Una bomba esta representada por una bolita negra.
    */
}

procedure SacarBomba(){
    /*
        *Proposito: Saca una bomba de la parcela actual.
        *Precondicion: Ninguna.
    */
    
}

procedure Poner_Nutrientes(cantidadDeNutrientesAPoner) {
    /*
        Proposito: Pone cantidadDeNutrientesAPoner nutrientes en la parcela actual.
        Parametros:
            * cantidadDeNutrientesAPoner: es un numero que representa la cantidad
            de nutrientes que se pondran en la parcela actual.
        Precondicion: No hay nutrientes en la parcela actual.
        Observaciones: Un nutriente está representado por una bolia azul.
    */
}

procedure Sacar_Nutrientes(cantidadDeNutrientesASacar){
    /*
        *Proposito: quita cantidadDeNutrientesASacar nutrientes de la parcela actual.
        *Parametros:
            *cantidadDeNutrientesASacar: es un numero que indica la cantidad de nutrientes
            que se deben quitar de la parcela actual.
        *Precondicion: Ninguna.
    */
}


procedure Poner_SemillasAl_(cantidad, dirección){
    /*
        Proposito: Mueve el cabezal en direccion dirección, cantidad de veces, para
        plantar semillas.
        Parametros:
            *cantidad: es un numero que indica la cantidad de veces que se movera
            el cabezal de parcela.
            *dirección: indica al direccion hacia donde se movera el cabezal.
        Precondicion: hay al menos cantidad de parcelas hacia direccion.
    */
}

procedure Sacar_ÁrbolesAl_(cantidad, dirección){
    /*
        *Proposito: 
    */
}
//EJERCICIO 7A


//EJERCICIO 7 B

procedure InformarBajasAliadas(bajasAliadas) {
    /*
        Proposito: representa la cantidad de bajas aliadas en el tablero.
        Parametros: 
            *bajasAliadas: es un numero que representa la cantidad de soldados aliados
            que mueren.
        Precondicion: hay al menos un soldado enemigo en la celda actual.
    */
  repeat(bajasAliadas) {
    Sacar(Negro)
  }
}

procedure InformarBajasEnemigas(bajasEnemigas) {
    /*
        Proposito: representa la cantidad de bajas enemigas luego de la batalla en el 
        tablero.
        Parametros:
            *bajasEnemigas: es un numero que representa la cantidad de enemigos que
            mueren.
        Precondicion: Ninguna.     
    */
  repeat(nroBolitas(Rojo)) {
    Sacar(Rojo)
  }
}


procedure PelearLaBatalla(cantidadEnemigos){
    /*
        Proposito: Desarrolla una batalla entre dos ejercitos, uno aliado y otro enemigo.
        Parametros:
            *cantidadEnemigos: es un numero que representa la cantida de enemigos que hay
            en la celda actual.
        Precondicion: El numero de soldados aliados, es mayor que el de los enemigos.
        Observacion: 
            *Un soldado enemigo se representa con una bolita roja.
            *Un soldaod aliado se representa con una bolita negra.
    */
    InformarBajasAliadas((cantidadEnemigos) + (cantidadEnemigos div 3) + 1)
    InformarBajasEnemigas(cantidadEnemigos)
}

program {
  PelearLaBatalla(nroBolitas(Rojo))
}


// EJERCICIO N°6
procedure SacarTodas_(colorASacar){
    /*
        Proposito: Saca todas la bolitas de color "colorASacar" de la celda actual.
        Parametros:
            *colorASacar: es el color a sacar de la celda actual
    */
    Sacar__Veces(colorASacar, nroBolitas(colorASacar))
}

procedure Sacar__Veces(colorAQuitar, cantidadDeVeces){
    repeat(cantidadDeVeces){
        Sacar(colorAQuitar)   
    }
}

program{
    SacarTodas_(Rojo)
    SacarTodas_(Negro)
}

//4 C REFORMADO.

procedure PudrirHasta_Manzanas(cantidadAPudrir){
    /*
        Proposito: pudre cantidadAPudrir manzanas, según los gusanos y las manzanas en buen estado
        que hay en la celda actual.
        Parametro:
            *cantidadAPudrir: es un numero que indica la cantidad de manzanas que se van a pudrir.
        Precondicion: Ninguna.
        *Observacion: 
        *Una manzana se representa con una bolita roja.
        *Un gusano con una bolita verde.
        *Una manzana podrida se representa con una bolita negra.
    */
  
    repeat(cantidadAPudrir){
        PudrirManzanaSiHay()
    }
}

procedure PudrirManzanaSiHay(){
    /*
        Proposito: pudre una manzana de la celda actual, si hay.
        Una manzana se pudre si hay un gusano en la celda actual.
        Precondicion: ninguna.
    */
    if (sePuedePudrirManzana()){
        Reemplazar_Y_Por_(manzana(), gusano(), manzanaPodrida())
    }
    
}

procedure Reemplazar_Y_Por_(primerColor, segundoColor, tercerColor){

    /*
        Proposito: Reemplaza una bolita de color "primerColor" y una "segundoColor" por una
        "tercerColor".
        Parametros: 
            *primerColor: es el color de la primer bolita a reemplazar.
            *segundoColor: es el color de la segunda bolita a reemplazar.
            *tercerColor: es el color de la bolita que se va a agregar.
        Precondicion: Ninguna.
    */
    Sacar(primerColor)
    Sacar(segundoColor)
    Poner(tercerColor)
}


function sePuedePudrirManzana(){
    /*
        Proposito: sensa la celda actual y verifica si se puede pudrir una manzana.
        Precondicion: Ninguna.
        Devuelve: un valor de verdad.
    */
    return (hayManzanasEnBuenEstado() && hayGusanos())
}

function hayManzanasEnBuenEstado(){
    return (hayBolitas(manzana()))
}

function hayGusanos(){
    return(hayBolitas(gusano()))
}


function manzana(){
    /*
        Proposito: Describe una manzana.
        Precondicion: Ninguna.
        Observacion: Una manzana se representa con rojo.
        Describe: una manzana.
    */
    return(Rojo)
}


function gusano(){
    /*
        Proposito: Describe un gusano.
        Precondicion: Ninguna.
        Observacion: Un gusano se representa con verde.
        Describe: un gusano.
    */
    return(Verde)
}


function manzanaPodrida(){
    /*
        Proposito: Describe una manzana podrida.
        Precondicion: Ninguna.
        Observacion: Una manzana podrida se representa con verde.
        Describe: Una manzana podrida.
    */
    return(Negro)
}

function cantidadDeManzanas(){
    /*
        Proposito: Contar la cantidad de manzanas de la celda.
        Precondicion: Ninguna.
        Describe: una unidad numerica.
    */
    return(nroBolitas(manzana()))
}


function cantidadDeGusanos(){
    /*  Proposito: Contar la cantidad de gusanos de la celda.
        Precondicion: Ninguna.
        Describe: una unidad numerica.
    */
    return (nroBolitas(gusano()))
}


program {
    PudrirHasta_Manzanas(cantidadDeManzanas())
}
