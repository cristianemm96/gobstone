// EJERCICIO N°1
procedure DibujarBanda_EnDiagonalNEDe_x_(color, alto, largo){
    /*
        *Proposito: Dibuja una banda en diagonal, de color "color" y tamaño "alto"x"largo"
        *Parametros:
            *color: es el color con el cual se dibujara la banda
            *alto: es un numero que representa el alto de la banda.
            *largo: el un numero que representa el largo de la banda.
        *Precondicion: Hay al menos "largo"+1 celdas hacia el norte, y "alto"+1 celdas hacia el este.
        //LARGO + ALTO -1 AL NORTE
        //LARGO -1 CELDAS AL ESTE
    */
    DibujarUnaParteDeLaBanda(color, alto+1)
    VolverAlInicioDeLaParteDeLaBanda(largo-1)
    UbicarCabezalEnLaProximaParte()
    DibujarUnaParteDeLaBanda(color, alto+1)
    VolverAlInicioDeLaParteDeLaBanda(largo-1)
    UbicarCabezalEnLaProximaParte()
    DibujarUnaParteDeLaBanda(color, alto+1)
    VolverAInicial(largo+1, alto+1)
}


procedure DibujarUnaParteDeLaBanda(color, tamaño){
    /*
        *Proposito: Dibuja una linea que conforma una banda en diagonal de tamaño "tamaño", y color "color".
        *Parametros: 
            *color: Es el color con el cual se va a dibujar la linea.
            tamaño: Es el tamaño de la linea en diagonal.
        *Precondicion: hay almenos "tamaño" celdas hacia el norte, y "tamaño" celdas hacia el este.
    */
    repeat(tamaño){
        Poner(color)
        Mover(Este)
        Mover(Norte)
    }
    Poner(color)
}


procedure VolverAlInicioDeLaParteDeLaBanda(largoVuelta){
    /*
        *Proposito: Ubica el cabezal en el inicio de la parte de la banda dibujada.
        *Parametros:
            *largoVuelta: es un numero que indica la cantidad de celdas que debe volver el cabezal
            de forma diagonal.
        *Precondicion: hay al menos "largoVuelta" celdas hacia el Oeste, y las mismas hacia el Sur.
    */
    repeat(largoVuelta){
        Mover(Oeste)
        Mover(Sur)
    }
}


procedure VolverAInicial(altoDeVuelta, largoDeVuelta){
    /*
        *Proposito: Vuelve a la celda inicial, donde empieza la banda.
        *Parametros:
            *altoDeVuelta: es un numero que indica la cantidad de celdas que debe moverse el cabezal 
            en direccion sur
            *largoDeVuelta: es un numero que indica la cantidad de celdas que debe moverse el cabezal
            en direccion Oeste.
        *Precondicion: Hay al menos "altoDeVuelta" celdas hacia el Sur, y "largoDeVuelta" hacia el Oeste.
    */
    
    repeat(altoDeVuelta){
        Mover(Sur)
    }
    
    repeat(largoDeVuelta){
        Mover(Oeste)
    }
    
}

procedure UbicarCabezalEnLaProximaParte(){
    /*
        Proposito: Ubica el cabezal una celda hacia el norte para dibujar la proxima parte de la banda.
        Parametros: Hay al menos ua celda hacia el Norte.
    */
    Mover(Norte)
}

program{
    DibujarBanda_EnDiagonalNEDe_x_(Negro, 3, 5)
}

//EJERCICIO N° 2
procedure Mover_SegúnColor_(dirección,color){
    /*
        Proposito: Mueve el cabezal en direccion "direccion", dependiendo de la cantidad de colitas color 
        "color" que haya en la celda actual
        Parametros:
            *direccion: es la direccion en la cual se va a mover el cabezal. 
            *color: es un numero que indica la cantidad de celdas que se debe mover el cabezal.
        Precondicion: Debe haber al menos una bolita "color" en la celda actual, y "color" celdas
        hacia el "direccion".
    */
    repeat(nroBolitas(color)){
        Mover(dirección)
    }
  
}



program{
    Mover_SegúnColor_(Este, Negro)
}

//EJERCICIO N°8
/* REPRESENTACIÓN DEL DOMINIO
   - los virus se representan con bolitas Rojas, de 1 a 6 
   - una indicación de que la máquina de la celda actual no 
     tiene virus (indicación de OK) se representa con una 
     bolita Verde
   - el Hall del edificio en la celda 0,0 con la cantidad de 
     pisos representada por las bolitas Azules
   - el Hall del piso en la celda del borde Oeste de cada piso, 
     con la cantidad de máquinas del piso representada por las 
     bolitas Negras 
*/

program {
    RepararEdificio(nroBolitas(Azul))
}

procedure RepararEdificio(cantidadDePisos){
  /* 
     PROPÓSITO: 
       * reparar todas las máquinas del edificio. 
         El cabezal queda en el Hall del último piso 
         del edificio (el hall más al Norte)
     PRECONDICIONES: 
       * el cabezal debe estar en la hall del edificio
  */
    Subir1Piso()
    repeat(cantidadDePisos){
        RepararPiso(nroBolitas(Negro))
        VolverAlHallDelPiso(nroBolitas(Negro))
    }
    
}

procedure RepararPiso(cantidadDeMaquinas){
  /* 
     PROPÓSITO: 
       * reparar todas las máquinas del piso actual
         (sacando todos los Virus de las máquinas del piso)
     PRECONDICIONES: 
       * la celda actual es el Hall del piso
  */
  RepararMaquinasDelPiso(nroBolitas(Negro))
 
    }
    
    
    
    
}

procedure RepararMáquina(){
  /* 
     PROPÓSITO: 
       * eliminar los virus de la celda actual y dejar 
         la marca de OK 
     PRECONDICIONES: 
       * en la celda actual hay una máquina con virus
         y sin marcas de OK
  */
    SacarTodas_(Rojo)
    IndicarOk()
   
}

procedure IndicarOk() {
  /* 
     PROPÓSITO: 
       * indicar que la máquina de la celda actual no tiene 
         virus poniendo la indicación de OK
     PRECONDICIONES: 
       * la máquina de la celda actual no tiene virus ni 
         indicación de OK
  */
    Poner(Verde)
}

procedure SacarTodas_(colorASacar) {
  /*
     PROPÓSITO: 
       * sacar de la celda actual todas las bolitas 
         del color dado
     PRECONDICIONES: 
       * ninguna (es una operación total)
     PARÁMETROS:
       * colorASacar es un color, que indica el color 
          de las bolitas que se deben sacar
  */
    repeat(nroBolitas(colorASacar)){
        Sacar(colorASacar)
    }
}

procedure PasarAOtraMaquina(){
         Mover(Este)
}


procedure Subir1Piso(){
    Mover(Norte)
}

procedure VolverAlHallDelPiso(maquinas){
    repeat(maquinas){
        Mover(Oeste)
    }
}

//EJERCICIO N° 4
procedure Poner_Semillas(cantidadDeSemillasAPoner){
    /*
        Proposito: Pone cantidadDeSemillasAPoner semillas en la parcela actual.
        Parametros: 
            *cantidadDeSemillasAPoner: es un numero que representa la cantidad de semillas
            que se pondran en la celda actual.
        Precondicion: No hay ninguna semilla en la parcela actual.
        Observaciones: una bolita roja representa una semilla.
    */
    repeat(cantidadDeSemillasAPoner){
        Poner(Rojo)
    }
}

procedure Sacar_Semillas(cantidadDeSemillasASacar) {
    /*
        Proposito: saca cantidadDeSemillasASacar de la parcela actual.
        Parametros: 
            *cantidadDeSemillasASacar: es un numero que representa la cantidad de semillas
            que se deben sacar de la parcela actual.
        Precondicion: Ninguna.
    */
}

procedure Poner_Árboles(cantidadDeÁrbolesAPoner){
    /*
        *Proposito: Pone cantidadDeÁrbolesAPoner en la parcela actual. 
        *Parametros:
            *cantidadDeÁrbolesAPoner: es un numero que representa la cantidadd de arboles
            a poner.
        *Precondicion: No hay ningun arbol en la parcela actual.
        *Observaciones: Una bolita verde representa un arbol.
    */
}

procedure Sacar_Árboles(cantidadDeÁrbolesASacar){
    /*
        *Proposito: Saca cantidadDeÁrbolesASacar de la parcela actual.
        *Parametros: 
            *cantidadDeÁrbolesASacar: es un numero que representa la cantidad de arboles
            que se quitaran de la parcela actual.
        *Precondicion: Ninguna.
    */
}

procedure PonerBomba(){
    /*
        *Proposito: Pone una bomba en la celda actual.
        *Precondicion: No hay ninguna bomba en la parcela actual.
        *Observacion: Una bomba esta representada por una bolita negra.
    */
}

procedure SacarBomba(){
    /*
        *Proposito: Saca una bomba de la parcela actual.
        *Precondicion: Ninguna.
    */
    
}

procedure Poner_Nutrientes(cantidadDeNutrientesAPoner) {
    /*
        Proposito: Pone cantidadDeNutrientesAPoner nutrientes en la parcela actual.
        Parametros:
            * cantidadDeNutrientesAPoner: es un numero que representa la cantidad
            de nutrientes que se pondran en la parcela actual.
        Precondicion: No hay nutrientes en la parcela actual.
        Observaciones: Un nutriente está representado por una bolia azul.
    */
}

procedure Sacar_Nutrientes(cantidadDeNutrientesASacar){
    /*
        *Proposito: quita cantidadDeNutrientesASacar nutrientes de la parcela actual.
        *Parametros:
            *cantidadDeNutrientesASacar: es un numero que indica la cantidad de nutrientes
            que se deben quitar de la parcela actual.
        *Precondicion: Ninguna.
    */
}


procedure Poner_SemillasAl_(cantidad, dirección){
    /*
        Proposito: Mueve el cabezal en direccion dirección, cantidad de veces, para
        plantar semillas.
        Parametros:
            *cantidad: es un numero que indica la cantidad de veces que se movera
            el cabezal de parcela.
            *dirección: indica al direccion hacia donde se movera el cabezal.
        Precondicion: hay al menos cantidad de parcelas hacia direccion.
    */
}

procedure Sacar_ÁrbolesAl_(cantidad, dirección){
    /*
        *Proposito: 
    */
}
