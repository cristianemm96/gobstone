// -------------------------------------------- EJERCICIO 1 ---------------------------------------
function elMotoqueroEstáActivo(){
    /* 
        Proposito: Vale verdadero cuando hay un motoquero activo.
        Precondición: Ninguna.
        Resultado: Booleano.
    */
    return (hayBolitas(Verde))
}
//----------------------------------------------- EJERCICIO 2 ----------------------------------
function cantidadDeVecinosActivos(){
    /*
        Proposito: Cuenta la cantida de vecinos que tiene el motoquero actual.
        Precondición: Ninguna.
        Resultado: Un número.
        Observación: hay entre  0 y 8 vecinos.
    */
    return (nroVecinosOrtogonales())
}
//CONTADOR EN DIRECCIONES ORTOGONALES --------------------------------------------------------------------
function nroVecinosOrtogonales(){
    /*
        Proposito: Cuenta la cantidad de vecinos que hay en direcciones ortogonales.
        Precondición: Ninguna
        Resultado: Un número.
        Observación: hay entre 0 y 4 vecinos.
    */
    dirActual := minDir()
    nroVecinos := 0
    while (dirActual /= maxDir()){
        nroVecinos := nroVecinos + hayVecinosAl(dirActual)
        dirActual := siguiente(dirActual)
    }
    return (nroVecinos + hayVecinosAl(dirActual))
}

function hayVecinosAl(direccion){
    /*
        Proposito: Sensa si el vecino en direccion
        "direccion" es motoquero activo.
        Precondición: Ninguna.
        Resultado: Un número.
    */
    return (choose 1 when (hayVecinoActivoAl_(direccion))
                   0 otherwise)    
}    

function hayVecinoActivoAl_(dirección){
    /*
        Proposito: Sensa si se puede mover al vecino ubicado en "dirección" y si es activo.
        Precondición: Ninguna.
        Resultado: Booleano.
        Parametros:
            *precondición: es una dirección
    */
    return (puedeMover(dirección) && estadoDelVecinoAl_(dirección))
}   

function estadoDelVecinoAl_(direccion){
    /*
        Proposito: Se mueve al vecino a "direccion" y sensa si es activo o no.
        Precondición: Hay a menos un vecino en dirección "dirección".
        Resultado: Booleano
        Parametros: 
            *dirección: es una dirección
    */
    Mover(direccion)
    return(elMotoqueroEstáActivo())
}

//CONTADOR EN DIRECCIONES DIAGONALES----------------------------------------------

function nroVecinosDiagonales(){
    /*
        Proposito: Cuenta los vecinos activos que hay en direcciones diagonales.
        Precondición: Ninguna.
        Resultado: Un número.
        Observación: hay entre 0 y 4 vecinos.
    */
    dirActual := minDir()
    nroVecinosActivos := 0
    while (dirActual /= maxDir()){
        nroVecinosActivos := nroVecinosActivos + hayVecinosActivosAl_(dirActual, siguiente(dirActual))
        dirActual := siguiente(dirActual)    
    }
    return (nroVecinosActivos + hayVecinosActivosAl_(dirActual, siguiente(dirActual)))
}

function hayVecinosActivosAl_ (dirPrincipal, dirSecundaria){
    /*
        Proposito: Sensa si hay vecinos activos en la direccion "dirPrincipal" y
        "dirSecundaria".
        Precondición: Ninguna.
        Parametro:
            *dirPrincipal: es una dirección.
            *dirSecundaria: es una dirección.
        Resultado: Un número.
        Observación: vale 1 o 0.
    */
    return (choose 1 when (esActivoAl_Y_(dirPrincipal, dirSecundaria))
                   0 otherwise)
}

function esActivoAl_Y_(dir1, dir2){
    /*
        Proposito: Sensa si el vecino en direccion "dir1" y "dir2" es activo.
        Precondición: Ninguna.
        Parametros:
            *dir1: es una dirección.
            dir2: es una dirección.
        Resultado: Booleano.
    */
    return (puedeMover(dir1) && puedeMover(dir2) && hayVecinoAl_Y_(dir1, dir2))
}

function hayVecinoAl_Y_(dir1, dir2){
    /*
        Proposito: Mueve el cabezal al vecino ubicado en la dirección "dir1" y "dir2".
        Precondición: Hay lugar al "dir1" y luego al "dir2".
        Parametros:
            *dir1: es una dirección.
            *dir2: es una dirección.
        Resultado: Un booleano.
    */
    Mover(dir1)
    Mover(dir2)
    return(elMotoqueroEstáActivo())
}

//----------------------------- EJERCICIO 3 ----------------------//
procedure ProcesarMotoquero() {
    /*
        Proposito: Recorre todo el tablero procesando a cada motoquero.
            *A: Si es motoquero activo con menos de dos vecinos activos, se inactiva.
            *B: Si es motoquero activo con más de tres vecinos activos, pasa a la inactividad.
            *C: Si es motoquero activo con exactamente dos o tres vecinos activos continúa 
            activo.
            *D: Si es motoquero inactivo con exactamente tres vecinos activos se convierte en 
            activo.
        Precondición: Ninguna.
    */
    ProcesarTodosLosMotoqueros()
    IrAlInicio()
    AplicarPautasACadaMotoquero()
    
}
procedure IrAlInicio(){
    IrAlBorde(Sur)
    IrAlBorde(Oeste)
}
procedure AplicarPautasACadaMotoquero(){
    /*
        Proposito: Incentiva o aburre a los motoqueros dependiendo su estado y su entorno.
        Precondición: Ninguna.
    */
    while (not esLaÚltimaCelda()){
        ActualizarEstadoDeMotoquero()
        IrAlSiguienteMotoquero()
    }
    ActualizarEstadoDeMotoquero()
}


procedure ActualizarEstadoDeMotoquero(){
    if(hayBolitas(seAburrio())){
        Sacar(motoquero())
        Sacar(seAburrio())
    }
    elseif(hayBolitas(fueIncentivado())){
        Poner(motoquero())
        Sacar(fueIncentivado())
    }
}

procedure ProcesarTodosLosMotoqueros(){
    while (not esLaÚltimaCelda()){
        ProcesarSegúnEstadoDeMotoquero()
        IrAlSiguienteMotoquero()
    }
    ProcesarSegúnEstadoDeMotoquero()
}

procedure ProcesarSegúnEstadoDeMotoquero(){
    /*
        Proposito: Dependiendo del estado del motoquero, lo procesa y actualiza su estado
        en el caso de que deba ser incentivado, o deba aburrirse, o su estado no cambia.
        Precondición: Ninguna.
    */
    if (not elMotoqueroEstáActivo() && cantidadDeVecinosActivos() == 3){
        IncentivarAlMotoquero()
    }
    elseif (elMotoqueroEstáActivo() && cantidadDeVecinosActivos() < 2){
        AburrirAlMotoquero()
    }
    elseif (elMotoqueroEstáActivo() && cantidadDeVecinosActivos() > 3 ){
        AburrirAlMotoquero()
    }
    elseif (elMotoqueroEstáActivo() && cantidadDeVecinosActivos() == 2){
        
    }
    elseif (elMotoqueroEstáActivo() && cantidadDeVecinosActivos() == 3){
        
    }
}

procedure IrAlSiguienteMotoquero(){
    /*
        Proposito: Recorre el tablero sensando a todos los motoqueros presentes.
        Precondición: Ninguna.
    */
    
    if(puedeMover(Este)){
        Mover(Este)
    }
    else {
        IrAlBorde(Oeste)
        Mover(Norte)
    }
}

procedure IncentivarAlMotoquero(){
     /*
        Proposito: Incentiva al motoquero actual.
        Precondición: El motoquero tiene que tener 3 vecinos activos.
        Observación: El motoquero se incentiva con una bolita de color azul.
    */
    
    Poner(Azul)
}

procedure AburrirAlMotoquero(){
     /*
        Proposito: Aburre al motoquero actual.
        Precondición: El motoquero activo tiene menos de 2 vecinos.
        Observación: El motoquero se aburre con una bolita color roja.
    */
    
    Poner(Rojo)
}

function fueIncentivado(){
    return(Azul)
}

function seAburrio(){
    return(Rojo)
}

function motoquero(){
    return(Verde)
}

function esLaÚltimaCelda(){
    /*
        Proposito: Vale verdadero cuando no puede moverse en dirección Norte, y en dirección Este.
        Precondición: Ninguna.
        Resultado: Booleano.
    */
    return (not puedeMover(Norte) && not puedeMover(Este))
}

//----------------------EJERCICIO 5---------------------------------

function hayMotoquerosActivosSinClub(){
    /*
        Proposito: Vale verdadero cuando el motoquero no tiene club.
        Precondición: Ninguna.
        Resultado: Booleano.
        Observación: El motoquero tiene club, si tiene bolitas negras en el.
    */
    return(elMotoqueroEstáActivo() && nroBolitas(Negro) == 0)
}

procedure  IrAMotoqueroActivoSinClub(){
    /*
        Proposito: Ubica el cabezal en el primer motoquero sin club que encuentre.
        Precondición: Ninguna.
    */
    while (not hayMotoquerosActivosSinClub() && not esLaÚltimaCelda()){
        IrAlSiguienteMotoquero()
        AsignarClub_AMotoquerosConectados(númeroDeClub)
    }
}
function hayMotoquerosActivosSinClub(){
    /*
        Proposito: Vale verdadero cuando el motoquero no tiene club.
        Precondición: Ninguna.
        Resultado: Booleano.
        Observación: El motoquero tiene club, si tiene bolitas negras en el.
    */
    return(hayBolitas(Verde) && nroBolitas(Negro) == 0)
}

---------------------------
function hayVecinosSinClubAl_(dirActual){
    if(puedeMover(dirActual)){
        Mover(dirActual)
    }
    return (hayMotoquerosActivosSinClub())
}

procedure AsignarClub(){
    dirActual := minDir()
    Poner__Veces(2, Negro)
    while (dirActual /= maxDir()){
        AsignarClubAl_(dirActual, 2)
        dirActual := siguiente (dirActual)
    }
    AsignarClubAl_(dirActual, 2)
}

procedure AsignarClubAl_(dirActual, nro){
    if(hayVecinosSinClubAl_(dirActual)){
        Mover(dirActual)
        Poner__Veces(nro, Negro)
        Mover(opuesto (dirActual))
    }
}

procedure  Poner__Veces(nro, color){
    repeat(nro){
        Poner(color)
    }
}

program{
    AsignarClub()
}
