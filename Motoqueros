// -------------------------------------------- EJERCICIO 1 ---------------------------------------
function elMotoqueroEstáActivo(){
    /* 
        Proposito: Vale verdadero cuando hay un motoquero activo.
        Precondición: Ninguna.
        Resultado: Booleano.
    */
    return (hayBolitas(Verde))
}
//----------------------------------------------- EJERCICIO 2 ----------------------------------
function cantidadDeVecinosActivos(){
    /*
        Proposito: Cuenta la cantida de vecinos que tiene el motoquero actual.
        Precondición: Ninguna.
        Resultado: Un número.
        Observación: hay entre  0 y 8 vecinos.
    */
    return (nroVecinosOctogonales())
}
//CONTADOR EN DIRECCIONES OCTOGONALES --------------------------------------------------------------------
function nroVecinosOctogonales(){
    /*
        Proposito: Cuenta la cantidad de vecinos que hay en direcciones octogonales.
        Precondición: Ninguna
        Resultado: Un número.
        Observación: hay entre 0 y 4 vecinos.
    */
    dirActual := minDir()
    nroVecinos := 0
    while (dirActual /= maxDir()){
        nroVecinos := nroVecinos + hayVecinosAl(dirActual)
        dirActual := siguiente(dirActual)
    }
    return (nroVecinos + hayVecinosAl(dirActual))
}

function hayVecinosAl(direccion){
    /*
        Proposito: Sensa si el vecino en direccion
        "direccion" es motoquero activo.
        Precondición: Ninguna.
        Resultado: Un número.
    */
    return (choose 1 when (hayVecinoActivoAl_(direccion))
                   0 otherwise)    
}    

function hayVecinoActivoAl_(dirección){
    /*
        Proposito: Sensa si se puede mover al vecino ubicado en "dirección" y si es activo.
        Precondición: Ninguna.
        Resultado: Booleano.
        Parametros:
            *precondición: es una dirección
    */
    return (puedeMover(dirección) && estadoDelVecinoAl_(dirección))
}   

function estadoDelVecinoAl_(direccion){
    /*
        Proposito: Se mueve al vecino a "direccion" y sensa si es activo o no.
        Precondición: Hay a menos un vecino en dirección "dirección".
        Resultado: Booleano
        Parametros: 
            *dirección: es una dirección
    */
    Mover(direccion)
    return(elMotoqueroEstáActivo())
}

//CONTADOR EN DIRECCIONES DIAGONALES----------------------------------------------

function nroVecinosDiagonales(){
    /*
        Proposito: Cuenta los vecinos activos que hay en direcciones diagonales.
        Precondición: Ninguna.
        Resultado: Un número.
        Observación: hay entre 0 y 4 vecinos.
    */
    dirActual := minDir()
    nroVecinosActivos := 0
    while (dirActual /= maxDir()){
        nroVecinosActivos := nroVecinosActivos + hayVecinosActivosAl_(dirActual, siguiente(dirActual))
        dirActual := siguiente(dirActual)    
    }
    return (nroVecinosActivos + hayVecinosActivosAl_(dirActual, siguiente(dirActual)))
}

function hayVecinosActivosAl_ (dirPrincipal, dirSecundaria){
    /*
        Proposito: Sensa si hay vecinos activos en la direccion "dirPrincipal" y
        "dirSecundaria".
        Precondición: Ninguna.
        Parametro:
            *dirPrincipal: es una dirección.
            *dirSecundaria: es una dirección.
        Resultado: Un número.
        Observación: vale 1 o 0.
    */
    return (choose 1 when (esActivoAl_Y_(dirPrincipal, dirSecundaria))
                   0 otherwise)
}

function esActivoAl_Y_(dir1, dir2){
    /*
        Proposito: Sensa si el vecino en direccion "dir1" y "dir2" es activo.
        Precondición: Ninguna.
        Parametros:
            *dir1: es una dirección.
            dir2: es una dirección.
        Resultado: Booleano.
    */
    return (puedeMover(dir1) && puedeMover(dir2) && hayVecinoAl_Y_(dir1, dir2))
}

function hayVecinoAl_Y_(dir1, dir2){
    /*
        Proposito: Mueve el cabezal al vecino ubicado en la dirección "dir1" y "dir2".
        Precondición: Hay lugar al "dir1" y luego al "dir2".
        Parametros:
            *dir1: es una dirección.
            *dir2: es una dirección.
        Resultado: Un booleano.
    */
    Mover(dir1)
    Mover(dir2)
    return(elMotoqueroEstáActivo())
}

//----------------------------- EJERCICIO 3 ----------------------//
procedure ProcesarMotoquero(){
    /*
        Proposito: Recorre todo el tablero procesando a cada motoquero.
            *A: Si es motoquero activo con menos de dos vecinos activos, se inactiva.
            *B: Si es motoquero activo con más de tres vecinos activos, pasa a la inactividad.
            *C: Si es motoquero activo con exactamente dos o tres vecinos activos continúa 
            activo.
            *D: Si es motoquero inactivo con exactamente tres vecinos activos se convierte en 
            activo.
        Precondición: Ninguna.
    */
    while (not esUltimaCelda()){
        AnalizarMotoquero()
        IrAlSiguienteMotoquero()
    }
    AnalizarMotoquero()
}

procedure IrAlSiguienteMotoquero(){
    if(puedeMover(Este)){
        Mover(Este)
    }
    else{
        IrAlBorde(Oeste)
        Mover(Norte)
    }
}

procedure AnalizarMotoquero(){
    /*
        Proposito: Analiza al motoquero actual, y dependiendo su contexto, lo incentiva o lo
        aburre cuando se deba.
        Precondición: Ninguna.
        Observación: 
            *A: Si es motoquero activo con menos de dos vecinos activos, se aburre.
            *B: Si es motoquero activo con más de tres vecinos activos, se aburre.
            *C: Si es motoquero activo con exactamente dos o tres vecinos activos continúa 
            activo.
            *D: Si es motoquero inactivo con exactamente tres vecinos activos se incentiva.
    */
    if (elMotoqueroEstáActivo() &&  cantidadDeVecinosActivos() < 2) {
        AburrirMotoquero()
    }
    elseif (elMotoqueroEstáActivo() &&  cantidadDeVecinosActivos() > 3){
        AburrirMotoquero()
    }
    elseif (elMotoqueroEstáActivo() &&  (cantidadDeVecinosActivos() == 2 || cantidadDeVecinosActivos() == 3 )){
        
    }
    elseif (not elMotoqueroEstáActivo() && cantidadDeVecinosActivos() == 3){
        IncentivarMotoquero()
    } 
}

procedure AburrirMotoquero(){
    /*
        Proposito: Aburre al motoquero.
        Precondición: Ninguna.
        Observación: Un motoquero se aburre con una bolita de color rojo.
    */
    Poner(Rojo)
}

procedure IncentivarMotoquero(){
    /*
        Proposito: Incentiva al motoquero.
        Precondición: Ninguna.
        Observación: Un motoquero se incentiva con una bolita de color azul.
    */
    Poner(Azul)
}

function esUltimaCelda(){
    /*
        Proposito: Analiza si es el ultimo motoquero del tablero, ubicado en la esquina
        Norte-Este.
        Precondición: Ninguna.
        Resultado: Booleano.
    */
    return(not puedeMover(Norte) && not puedeMover(Este))
}

//------------------------EJERCICIO 4-----------------------------

procedure Simular_Fases(cantidadDeFases){
    /*
        Proposito: Simula la interacción de la convención de motoqueros durante cantidadDeFases
        fases.
        Parametros: 
            *cantidadDeFases: Es un númeroo.
        Precondición: Ninguna.
    */
    IrAlInicioDeLaConvencion()
    AplicarPautasAMotoqueros(cantidadDeFases)
}

procedure AplicarPautasAMotoqueros(cantidadDeFases){
    repeat(cantidadDeFases){
        CambiarEstadoDeMotoqueros()
    }
}

procedure CambiarEstadoDeMotoqueros(){
    
    while (not esUltimaCelda()){
        AplicarPautasAlMotoquero()
        IrAlSiguienteMotoquero()
    }
    AplicarPautasAlMotoquero()
}

procedure AplicarPautasAlMotoquero(){
    if(elMotoqueroSeAburrio()){
        Sacar(motoquero())
        Sacar(Rojo)
    }
    elseif(elMotoqueroSeIncentivó()){
        Poner(motoquero())
        Sacar(Azul)
    }
}

procedure IrAlInicioDeLaConvencion(){
    IrAlBorde(Sur)
    IrAlBorde(Oeste)
}

function motoquero(){
    return(Verde)
}

function elMotoqueroSeAburrio(){
    return(hayBolitas(Rojo))
}

function elMotoqueroSeIncentivó(){
    return(hayBolitas(Azul))
}

//-----------------EJERCICIO 5 ---------------------------

function cantidadDeClubesEnLaConvención(){
    nroDeClub := 0
    while (hayMotoquerosActivosSinClub()){
        nroDeClub := nroDeClub + 1
        IrAMotoqueroActivoSinClub()
        AsignarClub_AMotoquerosConectados(nroDeClub)
    }
    return (nroDeClub)
}

program{
    ProcesarMotoquero()
    Simular_Fases(2)
}
