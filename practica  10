///////// ------------------ PRACTICA 10 ---------------------////////////

//// ----------- EJERCICIO 1 -------------////
procedure PonerColores_EnLaCeldaActual(lista){
    /*
        Proposito: dada una lista de Colores, pone una bolita del color correspondiente por 
        cada uno de los elementos de la misma.
        Parametros:
            *lista: es una lista.
        Precondición: Ninguna.
    */
    listaDeColores := lista
    while (not esVacía(listaDeColores)){
        Poner(primero(listaDeColores))
        listaDeColores := resto(listaDeColores)
    }
}


function listaConColores(){
    return([Azul, Azul, Verde, Rojo, Verde])
}
/*
program{
    PonerColores_EnLaCeldaActual(listaConColores())
}
*/

//// ------------- Ejercicio 2 ----------- ////

procedure RecorrerCamino_(lista){
    /*
        Proposito: Mueve el cabezal en base a las direcciones de la lista "lista"
        Parametros:
            *lista: es una lista.
        Precondición: Ninguna.
    */
    listaDeDirecciones := lista
    while (not esVacía(listaDeDirecciones)){
        MoverAl_SiCorresponde(primero(listaDeDirecciones))
        listaDeDirecciones := resto(listaDeDirecciones)
    }
}

procedure MoverAl_SiCorresponde(direccionDeLista){
    if(puedeMover(direccionDeLista)){
        Mover(direccionDeLista)
    }
    else{
        
    }
}

function listaDeDirecciones(){
    return([Norte, Este, Sur, Sur, Oeste])
}
/*
program{
    RecorrerCamino_(listaDeDirecciones())
}
*/

//// ------------ Ejercicio 3 -----------////


function aparicionesDeColor_(color){
    /*
        Proposito: Describe una lista de números, que contiene la cantidad de bolitas de color
        "color" que aparecen en todo el tablero. La lista queda ordenada, según la cantidad de
        bolitas de color "color", que van apareciendo en el tablero, en sentido Norte- Oeste.
        Parametros:
            *color: un color.
        Resultado: Lista de números.
        Precondición: El cabezal esta ubicado en la esquina Sur - Este.
    */
    bolitasPorCelda := []
    while ( not esLaUltimaCelda()){ 
        bolitasPorCelda := bolitasPorCelda ++ [nroBolitas(Rojo)]
        IrASiguienteCelda()
    }
    return(bolitasPorCelda ++ [nroBolitas(Rojo)])
}

function esLaUltimaCelda(){
    /*
        Proposito: Describe si es la última celda del tablero.
        Resultado: Booleano
    */
    return(not puedeMover(Norte) && not puedeMover(Oeste))
}

procedure IrASiguienteCelda(){
    /*
        Proposito: Mueve el cabezal una celda por vez en direccion Norte-Oeste hasta llegar
        a la esquina Norte - Este.
        Precondición: Ninguna.
    */
    if(puedeMover(Norte)){
        Mover(Norte)
    }
    else{
        IrAlBorde(Sur)
        Mover(Oeste)
    }
}
/*
program{
    return(aparicionesDeColor_(Rojo))
}
*/

//// ------- Ejercicio 4 ---------////

procedure Poner_Bolitas_EnElTablero(lista, color){
    /*
        Proposito:  Dada una lista de números y un color, recorre el tablero con dirección 
        principal Norte y dirección secundaria Oeste y pone en cada celda la cantidad de bolitas 
        del color dado, según el elemento en la posición correspondiente.
        Parametros:
            *lista: es una lista de números.
            *color: es un color.
        Precondición: Ninguna.
    */
    if(hayMasNumerosQueCeldas(lista)){
        Poner_BolitasPorCeldaDeColor_(lista, color)
    }
    else{
        
    }
}

procedure Poner_BolitasPorCeldaDeColor_(lista, color){
    /*
        Proposito: Pone bolitas de color "color" en la celda actual, tantas veces como
        el elemento actual de la lista lista.
        Parametros:
            *lista: Lista de números.
            *color: Color
        Precondición: Ninguna.
    */
    IrAlInicioDelTablero()
    listaDeNumeros := lista
    while (not esLaUltimaCelda()){
        Poner_BolitasDeColor_(primero(listaDeNumeros), color)
        listaDeNumeros := resto(listaDeNumeros)
        IrASiguienteCelda()
    }
     Poner_BolitasDeColor_(primero(listaDeNumeros), color)
}

procedure Poner_BolitasDeColor_(elementoDeLista, color){
    /*
        Proposito: Pone "elementoDeLista" bolitas de color "color".
        Parametros:
            *elementoDeLista: Número.
            *color: Color.
        Precondicion: Ninguna
    */
    repeat(elementoDeLista){
        Poner(color)
    }
}

procedure IrAlInicioDelTablero(){
    /*
        Proposito: Ubica el cabezal en la esquina Sur - Este.
        Precondición: Ninguna.
    */
    IrAlBorde(Sur)
    IrAlBorde(Este)
}

function hayMasNumerosQueCeldas(lista){
    /*
        Proposito: Describe si hay más elementos de la lista que celdas del tablero actual.
        Parametros:
            *lista: Lista de Números.
        Resultado: Booleano.
        Precondicion: Ninguna
    */
    return(numeroElementos(lista) >= cantidadDeCeldas())
}


function cantidadDeCeldas(){
    /*
        Proposito: Describe la cantidad de celdas que hay en el tablero actual.
        Precondición: Ninguna.
        Resultado: Número.
        Precondicion: Ninguna.
    */
    IrAlInicioDelTablero()
    nroDeCeldas := 0                
    while (not esLaUltimaCelda()){
        nroDeCeldas := nroDeCeldas + 1 
        IrASiguienteCelda()
    }
    return(nroDeCeldas + 1)
}

function numeroElementos(lista){
    /*
        Proposito: Describe la cantidad de elementos que tiene la lista "lista".
        Parametros:
            *lista: es una lista de números.
        Precondición: Ninguna.
        Resultado: Número.
        Precondicion: Ninguna.
    */
    nroDeElementos := 0
    elementos := lista
    while (not esVacía(elementos)){
        nroDeElementos := nroDeElementos + 1 
        elementos := resto(elementos)
    }
    return(nroDeElementos)
}

function listaPrueba(){
    /*
        Proposito: Describe una lista con elementos de tipo número.
        Precondición: Ninguna.
    */
    return([4, 0, 3, 1, 0, 2, 10, 7, 9, 10])
}
/*
program{
    Poner_Bolitas_EnElTablero(listaPrueba(), Rojo)
}
*/

//// ------- Ejercicio 5 ---------////

function coloresEnLaCeldaActual(){
    /*
        Proposito: Describe una lista con los colores que aparecen en la celda actual.
        Precondición: Ninguna.
        Observación: La lista puede ser vacía, o puede tener 4 elementos.
        Resultado: Lista de elementos tipo color.
    */
    listaDeColores := []                                                //Inicializa una variable con contenido tipo lista.
    colorActual := minColor()                                           //Inicializa una variable con un valor tipo color.
    while (not colorActual == maxColor()){                                             //Inicia la repetición condicional
        listaDeColores := listaDeColores ++ hayColorActual(colorActual) //Agrega el color actual a la lista de colores si corresponde.
        colorActual := siguiente(colorActual)
    }
    return(listaDeColores ++ hayColorActual(colorActual))               //Devuelve la lista de colores luego de haber analizado la celda actual.
}

function hayColorActual(colorActual){
    /*
        Proposito: Describe si en la celda actual hay bolitas de color "colorActual".
        Parametros:
            *colorActual: es un color.
        Precondición: Ninguna.
        Resultado: Color.
    */
    return
    (
        choose [colorActual] when (hayBolitas(colorActual))            //Devuelve "colorActual" cuando hay bolita de este color.
                    []       otherwise    
    )
}
/*
program{
    return(coloresEnLaCeldaActual())
}
*/

//// ------------ Ejercicio 6 -------------- ////

function aparicionesDelColor_EnElCamino_(colorBuscado, direccionesDelCamino){
    /*
        Proposito:dado un color, colorBuscado, y una lista de Direcciones, direccionesDelCamino,
        describa la lista con la cantidad de bolitas del color dado en las celdas recorridas.
        Parametros:
            *colorBuscado: Lista con elementos de tipo Color.
            *direccionesDelCamino: Lista con elementos de tipo Direccion.
        Precondiciónes: Si el cabezal está ubicado en cualquiera de los bordes, el siguiente
        elemento de "direccionesDelCamino" no debe ser el mismo que la direccion en la que
        se encuentra el borde, en referencia a la celda de donde se encuentra el cabezal.
    */
    nroDeBolitasDeColor := 0
    direccionARecorrer := direccionesDelCamino
    while (not (esVacía(direccionARecorrer))){
        nroDeBolitasDeColor := nroDeBolitasDeColor + nroBolitasColor_(colorBuscado)
        MoverAlSiguienteDeLaLista(primero(direccionARecorrer))
        direccionARecorrer := resto(direccionARecorrer)
    }
    return(nroDeBolitasDeColor + nroBolitasColor_(colorBuscado))
}

procedure MoverAlSiguienteDeLaLista(direccionARecorrer){
    /*
        Proposito: Mueve el cabezal en direccion "direccionARecorrer".
        Parametros:
            *direccionARecorrer: Dirección.
        Precondición: Si hay un borde lindante a la celda actual,"direccionARecorrer" no puede
        ser una direccion que indique donde se encuentra el borde.
    */
    Mover(direccionARecorrer)
}

function nroBolitasColor_(colorBuscado){
    /*
        Proposito: Describe la cantidad de bolitas de color "colorBuscado" que hay en la celda
        actual.
        Parametros:
            *colorBuscado: es un color.
        Precondición: Ninguna.
        Resultado: Número.
    */
    return(nroBolitas(colorBuscado))
}


function listaDirecciones(){
    /*
        Proposito: Describe una lista de direcciones.
        Resultado: Lista con elementos de tipo Dirección.
        Precondición: Ninguna.
    */
    return([Oeste, Norte, Norte, Oeste, Oeste, Oeste, Oeste])
}
/*
program{
    return(aparicionesDelColor_EnElCamino_(Verde,listaDirecciones()))
}
*/

//// ----------- Ejercicio 7 ----------- ////

function longitudDe_(lista){
    /*
        Proposito: Describe la cantidad de elementos que tiene la lista "lista".
        Parametros: 
            *lista: Es una lista de elementos.
        Precondición: Ninguna.
        Resultado: Número
    */
    nroDeElementos := 0
    listaDeElementos := lista
    while (not esVacía(listaDeElementos)){
        nroDeElementos := nroDeElementos + 1
        listaDeElementos := resto(listaDeElementos)
    }
    return(nroDeElementos)
}
/*
program{
    return(longitudDe_(listaDirecciones()))   
}
*/

//// ---------- Ejercicio 8 ---------////
/// --------Ejercicio A --------///

function sumatoriaDe_(lista){
    /*
        Proposito: Describe la suma de todos los elementos de la lista "lista".
        Resultado: Número.
        Parametros:
            *Lista: lista con elementos tipo Número.
        Precondición: Ninguna.
    */
    sumatoria := 0
    elementosDeLista := lista
    while (not esVacía(elementosDeLista)){
        sumatoria := sumatoria + primero(elementosDeLista)
        elementosDeLista := resto(elementosDeLista)
    }
    return(sumatoria)
}

function listaParaSumar(){
    return([5, 5, 5])
}
/*
program{
    return(sumatoriaDe_(listaParaSumar()))
}
*/

/// -------- Ejercicio B --------///

function productoriaDe_(lista){
    /*
        Proposito: Describe el producto de todos los elementos de la lista "lista".}
        Parametros:
            *lista: es un elemento tipo Número.
        Precondición: La lista tiene al menos un elemento.
        Resultado: Número.
    */
    productosDeLaLista := primero(lista)
    elementosSinElPrimero := resto(lista)
    while(not esVacía(elementosSinElPrimero)){
        productosDeLaLista := productosDeLaLista * primero(elementosSinElPrimero)
        elementosSinElPrimero := resto(elementosSinElPrimero)
    }
    return(productosDeLaLista)
}
/*
program{
    return(productoriaDe_([1]))
}
*/

/// -------- Ejercicio C -------///

function cantidadDeBolitas_DelTablero(color){
    /*
        Proposito: indique la cantidad total de bolitas de color "color" que hay en el tablero.
        Parametros:
            *color: Un color.
        Resultad: Número.
        Precondición: Ninguna.
    */
    return(sumatoriaDe_(aparicionesDeColor_(color)))
}

//// ---------------- Ejercicio 9 ------------////

/// ----------Ejercicio A --------------///

function repetición_VecesDe_(numero, elemento){
    /*
        Proposito: describa una lista con la cantidad indicada de repeticiones, dado por "numero"
        del elemento.
        Parametros:
            *numero: Númeroo
            *elemento: elemento de tipo elemento.
        Precondición: Ninguna.
        Resultado: Lista de elementos tipo "elemento".
    */
    return(
        choose repetir__Veces(numero, elemento) when (numero > 0)
                        []    otherwise
    )
}

function repetir__Veces(numero, elemento){
    /*
        Proposito: Repite "numero" de veces el elemento "elemento".
        Parametros:
            *numero: Número.
            *elemento: elemento de tipo "elemento".
        Precondición: Ninguna.
        Resultado: lista de elementos tipo "elemento".
    */
    numeroDeVeces := numero
    listaDeElementos := []
    while (not numeroDeVeces == 0){
        listaDeElementos := listaDeElementos ++ [elemento]
        numeroDeVeces := numeroDeVeces - 1
    }
    return(listaDeElementos)
}
/*
program{
    return(repetición_VecesDe_(3, 8))
}
*/

/// ---------- Ejercicio B ---------///

function laLista_Clonada_Veces(lista, cantidadVeces){
    /*
        Proposito: dada una lista "lista" de elementos y un número "cantidadVeces", 
        describe la lista resultante de clonar la lista dada tantas veces como lo indica 
        "cantidadVeces".
    */
    numeroDeVeces := cantidadVeces
    listaClonada := []
    while (not numeroDeVeces == 0){
        listaClonada := listaClonada ++ lista
        numeroDeVeces := numeroDeVeces - 1
    }
    return(listaClonada)
}
/*
program{
    return(laLista_Clonada_Veces([1,2], 2))
}
*/

/// --------- Ejercicio C --------- ///

function losElementosDe_Clonados_Veces(lista, cantidadVeces){
    /*
        Proposito: dados una lista "lista"de elementos y un
        número "cantidadVeces", describa la lista que contenga los elementos dados en el orden 
        de dicha lista, pero repetidos la cantidad de veces "cantidadVeces".
        Parametros: 
            *lista: Una lista.
            *cantidadVeces: Número.
        Resultado: Lista de elementos elementos.
    */
    listaDeElementos := lista
    listaDeClonados := []
    while(not esVacía(listaDeElementos)){
        listaDeClonados := listaDeClonados ++ repetición_VecesDe_(cantidadVeces, primero(listaDeElementos))
        listaDeElementos := resto(listaDeElementos)
    }
    return(listaDeClonados)
}
/*
program{
    return(losElementosDe_Clonados_Veces([1,2], 3))
}
*/

//// ------------- Ejercicio 10 ----------////

function reversoDe_(lista){
    /*
        Proposito: Describe los elementos de la lista "lista", pero en orden reverso.
        Paremetros:
            *lista: Es una lista con elementos de cualquier tipo.
        Precondición: Ninguna.
        Resultado: Lista de elementos de tipo elementos de la lista "lista".
    */
    elementosDeLista := lista
    elementosAlReverso := []
    while (not esVacía(elementosDeLista)){
        elementosAlReverso := [primero(elementosDeLista)] ++ elementosAlReverso
        elementosDeLista := resto(elementosDeLista)
    }
    return(elementosAlReverso)
}
/*
program{
    return(reversoDe_([1, 2, 3, 4, 5]))
}
*/

