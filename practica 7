function tieneBolitas_Al_(color, dirección){
    /*
        Proposito: Devuelve si en la celda ubicada al "direcciòn" de la actual
        hay bolitas de color "color".
        Parametros: 
            *color: es el color de la bolita a sensar.
            *direcciòn: es la direcciòn en la que se encuentra la celda a sensar.
        Precondiciòn: hay al menos una celda en direcciòn "direcciòn".
    */
    Mover(dirección)
    return(hayBolitas(color))
}


function hayBolitas_Al_(color, dirección){
    /*
        Proposito: Sensa si hay una celda lindante en direcciòn "dirección" y si la misma
        tiene bolitas de color "color"
        Parametros:
            color: es el color de la bolita a sensar.
            direcciòn: es la direcciòn de la celda lindante a sensar.
        Precondicion: Ninguna.
        
    */
    return (puedeMover(dirección) && tieneBolitas_Al_(color, dirección))
}

program{
    return(hayBolitas_Al_(Verde, Sur))
}
---------------------------------------------------------------------------
P4
function máximoEntre_Y_(valor1, valor2){
    /*
        Proposito: Analiza si "valor1" es mayor que "valor2" o viceversa.
        Parametros:
            valor1: es el primer valor a comparar.
            valor2: es el segundo valor a comparar.
        Precondiciòn:Ninguna.
    */
    return (choose valor1 when (valor1>valor2)
                   valor2 otherwise
    )
}

program{
    return(máximoEntre_Y_(4, 4))
}


P5----------------------------------------------------------------------------------------------------------------------

function nroBolitas_EnLaFilaActual(color){
    /*
        Proposito: Analiza la cantidad de bolita de color "color"
        que hay en las celdas de la fila actual.
        Describe: Un valor numérico.
        Parametros: 
            color: es el color de las bolitas a contar.
        Precondición: Ninguna.
    */
    IrAlInicioDeLaFila()
    cantidadDeBolitas := 0
    while (puedeMover(Este)){
        cantidadDeBolitas := cantidadDeBolitas 
                           + numBolitasColor(color)
        IrASiguienteCelda()
    }
    return ( cantidadDeBolitas + numBolitasColor(color))
}

procedure IrASiguienteCelda(){
    /*
        Proposito: Mueve el cabezal una celda en dirección Este.
        Precondición: Debe haber al menos una celda en
        dirección Este.
    */
    
    Mover(Este)
}

procedure IrAlInicioDeLaFila(){
    IrAlBorde(Sur)
    IrAlBorde(Oeste)
}

function numBolitasColor(color){
    return (nroBolitas(color))
}

program{
    return (nroBolitas_EnLaFilaActual(Rojo))
}

P6----------------------------------------------------------------------------------------------------------------------
function nroFilas(){
    /*
        Proposito: cuenta la cantidad de celdas que tiene la fila
        actual.
        Describe: Un valor numérico.
        Precondición: Ninguna.
    */
    IrAlInicioDelTalbero()
    cantidadDeFilas:= 0
    while (puedeMover(Norte)){
        cantidadDeFilas :=  
                        cantidadDeFilas + 1
        Mover(Norte)
    }
    return (cantidadDeFilas + 1)
}

function nroColumnas(){
    IrAlInicioDelTalbero()
    cantidadDeColumnas := 0
    while (puedeMover(Este)){
        cantidadDeColumnas :=
                         cantidadDeColumnas + 1
        Mover(Este)
    }
    return (cantidadDeColumnas + 1)
}

procedure IrAlInicioDelTalbero(){
    IrAlBorde(Sur)
    IrAlBorde(Oeste)
}

program{
    return (nroFilas())
}

P7------------------------------------------------------------------------------------------------------------------
function distanciaAlBorde_(dirección){
    /*
        Proposito: Cuenta la cantida de celdas que hay entre
        la celda donde se encuentra ubicado el cabezal, y 
        el borde del extremo "dirección".
        Parametros: 
            *dirección: indica la dirección en la cual se debe
            mover el cabezal.
        Precondición: Ninguna.
    */
    celdasAlBorde := 0
    while(not(noHayLugarAl(dirección))){
        Mover(dirección)
        celdasAlBorde :=
                        celdasAlBorde + 1
    }
    return (celdasAlBorde)
}

function noHayLugarAl(dirección){
    /*
        Proposito: Vale verdad cuando el cabezal no puede moverse
        en dirección "dirección".
        Parametros:
            *dirección: indica la dirección en la que debe 
            moverse el cabeza.
        Precondición: Ninguna
    */
    return (not(puedeMover(dirección)))
}

program{
    return (distanciaAlBorde_(Oeste))
}

P8-------------------------------------------------------------------------------------------------------------------------
function árbol(){
    return (Verde)
}

function nroTotalDeÁrbolesEnElTerreno(){
    IrALaCeldaInicial()
    cantidadDeArboles := 0
    while (not(esLaUltimaCelda())){
        cantidadDeArboles := 
                            cantidadDeArboles + nroDeArboles()
        IrALaSiguienteCelda()
    }
    return (cantidadDeArboles + nroDeArboles())
     
}

function nroDeArboles(){
    return(nroBolitas(árbol()))
}

function esLaUltimaCelda(){
    return (not(puedeMover(Norte)) && not(puedeMover(Este)))
}

procedure IrALaCeldaInicial(){
    IrAlBorde(Sur)
    IrAlBorde(Oeste)
}

procedure IrALaSiguienteCelda(){
    if(puedeMover(Este)){
        Mover(Este)
    }
    else{
        IrAlBorde(Oeste)
        Mover(Norte)
    }
}

program{
    return (nroTotalDeÁrbolesEnElTerreno())
}
