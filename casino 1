//Ejecicio 1
procedure AgregarApuestaDe_Al_Para_(monto, nroApostado, nroJugador){
    /*
        Proposito: Agrega la apuesta indicada en alguna celda vacía.
        Precondición: Hay al menos una celda vacía donde ubicar la apuesta.
        Parametros: 
            *Monto: es el dinero que apuesta el jugador.
            *nroApostado: es el numero al cual apuesta el jugador.
            *nroJugador: es el numero que identifica al jugador.
    */
    BuscarCeldaVacía()
    AgregarApuesta(monto, nroApostado, nroJugador)
}

procedure BuscarCeldaVacía(){
    /*
        Proposito: Busca una celda vacía en la cual se ubicará al nuevo apostador.
        Precondición: Hay al menos una celda vacía en el tablero.
    */
    while (not esCeldaVacía()){
        PasarASiguienteCelda()
    }
}

procedure PasarASiguienteCelda(){
    if(puedeMover(Este)){
        Mover(Este)
    }
    else{
        IrAlBorde(Oeste)
        Mover(Norte)
    }
}

procedure AgregarApuesta(monto, nroApostado, nroJugador){
    /*
        Proposito: Agrega la apuesta del jugador "nroJugador", la cual consiste en
        "monto" pesos al "nroApostado".
        Parametros: 
            *monto: es el dinero apostado.
            *nroApostado: es el numero al cual se apuesta.
            *nroJugador: es el numero que identifica al jugador.
        Precondición: Ninguna.
    */
    IngresarMonto_(monto)
    IngresarNumeroApostado_(nroApostado)
    IngresarJugador_(nroJugador)
}

procedure IngresarMonto_(monto){
    Poner__Veces(monto, monto())
}

procedure IngresarNumeroApostado_(nroApostado){
    Poner__Veces(nroApostado, número())
}

procedure IngresarJugador_(nroJugador){
    Poner__Veces(nroJugador, jugador())
}

procedure Poner__Veces(cantidad, color){
    repeat(cantidad){
        Poner(color)
    }
}

function esCeldaVacía(){
    return (not hayBolitas(jugador()) && not hayBolitas(número()) && not hayBolitas(monto()) )
}

function jugador(){
    return(Rojo)
}

function número(){
    return(Azul)
}
//EJERCICIO 2 

function esUltimaCelda(){
    return (not puedeMover(Norte) && not puedeMover(Este))
}

procedure PagarYCobrarAl_(nroQueSalió){
    while (not esUltimaCelda()){
        AnalizarApuestas(nroQueSalió)
        PasarASiguienteCelda()
    }
    AnalizarApuestas(nroQueSalió)
}

procedure AnalizarApuestas(nroQueSalió){
    nroApostado := nroBolitas(número())
    if (nroApostado == nroQueSalió){
        PagarAlGanador()
    }
    else{
        CobrarAlPerdedor()
    }
}

procedure PagarAlGanador(){
    Poner__Veces(nroBolitas(monto()) * 5, monto())
}

procedure CobrarAlPerdedor(){
    Sacar__Veces(monto(), nroBolitas(monto()))
}

procedure Sacar__Veces(color, cantidad){
    repeat(cantidad){
        Sacar(color)
    }
}


function monto(){
    return(Verde)
}

//EJERCICIO 3

procedure RecogerPropinas(){
    while (not esUltimaCelda()){
        CobrarPropinas()
        PasarASiguienteCelda()
    }
    
}

procedure CobrarPropinas(){
    if(nroBolitas(monto()) >= 15){
        CobrarPropina()
    }
}

procedure CobrarPropina(){
    Sacar(monto())
}

//EJERCICIO D
procedure SeVaElJugador_(nroJugador){
    /* Propuesta: Borra todas las celdas que registran
       una apuesta del jugador indicado.
       Precondición: Ninguna.
       Parametros:
            *nroJugador: es un numero.
    */
    while (not esUltimaCelda()){
        BorrarApuestaAlJugador_(nroJugador)
        PasarASiguienteCelda()
    }
    BorrarApuestaAlJugador_(nroJugador)
}

procedure BorrarApuestaAlJugador_(nroJugador){
    /*
        Procedure: Si en la celda actual esta la apuesta del jugador "nroJugador",
        borra su apuesta.
        Precondición. Ninguna.
        Parametros:
            *nroJugador: es un numero
    */
    if(nroBolitas(jugador()) == nroJugador){
        BorrarJugador()
        BorrarApuesta()
        BorrarMonto()
    }
}

procedure BorrarJugador(){
    Sacar__Veces(jugador(), nroBolitas(jugador()))
}

procedure BorrarApuesta(){
    Sacar__Veces(número(), nroBolitas(número()))
}

procedure BorrarMonto(){
    Sacar__Veces(monto(), nroBolitas(monto()))
}



//Ejercicio E

procedure DuplicarApuestasAl_(nroApostado){
    /*
        Proposito: duplica el monto de las apuestas al número "nroApostado".
        Precondición: Ninguna.
    */
    while(not esUltimaCelda()){
        DuplicarAl_(nroApostado)
        PasarASiguienteCelda()
    }
    DuplicarAl_(nroApostado)
}

procedure DuplicarAl_(nroApostado){
    /*
        Proposito: Duplica el monto a los jugadores que hayan apostado "nroApostado".
        Precondición: Ninguna.
    */
    if(nroBolitas(número())==nroApostado){
        DuplicarApuesta()
    }
}

procedure DuplicarApuesta(){
    cantidadApostada := nroBolitas(monto())
    Sacar__Veces(monto(), nroBolitas(monto()))
    Poner__Veces(cantidadApostada * 2, monto())
}



program{
    DuplicarApuestasAl_(1)
}


