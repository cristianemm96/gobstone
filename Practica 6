//EJERCICIO 2 PRACTICA 6
procedure SacarTodas_(color){
    /*
        Proposito: Saca todas las bolitas de color "color" de la celda actual.
        Parametros: 
            *color: es el color de las bolitas que se deben sacar de la celda.
        Precondicion: Ninguna.
        
    */
    while (not (hayBolitasColor(color))){
        Sacar__Bolita(color)
    }
}

procedure Sacar__Bolita(color){
    /*
        Proposito: Saca una bolita de color "color".
        Parametros:
            *color: es el color de las bolita que se debe sacar de la celda.
        Precondicion: Ninguna.
    */
    Sacar(color)
}

function hayBolitasColor(color){
    return (nroBolitas(color)==0)
}

program {
    SacarTodas_(Rojo)
}

//EJERCICIO 3 PRACTICA 6 ----------------------------------------------------------------------------------
procedure VaciarFilaDe_(color){
    /*
        Proposito: inspecciona las celdas de la fila actual buscando bolita de color "color"
        para quitar todas.
        Parametros: 
            *color: es el color de las bolitas que se deben quitar.
        Precondicion: Ninguna.
    */
    IrAlBordeOeste()
    InspeccionaLasCeldas(color)
}

procedure IrAlBordeOeste(){
    /*
        Proposito: Ubica el cabezal en el borde Oeste.
        Precondicion: Ninguna
    */
    IrAlBorde(Oeste)
}

procedure InspeccionaLasCeldas(color){
    /*
        Proposito: Inspecciona las celdas de la fila actual en busqueda de bolitas de color
        "color" y las quita a toda.
        Parametro:
            *color: es el color de las bolita a quitar de la celda.
        Precondicion: Ninguna.
    */
    while  (nohayLugarAlEste()){
        SacarTodas__(color)
        IrUnaCeldaAlEste()
    }
    SacarTodas__(color)
}

procedure IrUnaCeldaAlEste(){
    /*
        Proposito: Mueve el cabeza una celda en dirección Este.
        Precondicion: Ninguna.
    */
    Mover(Este)
}


function nohayLugarAlEste(){
    return (puedeMover(Este))
}


procedure SacarTodas__(color) {
  while (not (nohayBolitasDeColor(color))) {
    Sacar__Bolita(color)
  }
}

procedure Sacar__Bolita(color) {
  Sacar(color)
}

function nohayBolitasDeColor(color) {
  return (nroBolitas(color) == 0)
}


program {
    VaciarFilaDe_(Rojo)
}

//EJERCICIO 4 ---------------------------------------------------------------------------------------------------
procedure VaciarTableroDe_(color){
    /*
        Proposito: Ubica el cabezal en el inicio del tablero y luego recorre todas las celdas
        en busqueda de bolitas de color "color" y las quita.
        Parametro:
            *color: Es el color de las bolitas a quitar de las celdas del tablero.
        Precondición: Ninguna.
    */
    IrAlInicioDelTablero()
    InspeccionarTodoElTablero(color)
}


procedure IrAlInicioDelTablero(){
    /*
        Proposito: Ubica el cabezal en la celda con bordes lindante a Oeste y Sur del tablero.
        Precondicion: Ninguna
    */
    IrAlBorde(Oeste)
    IrAlBorde(Sur)
}

procedure InspeccionarTodoElTablero(color){
    /*
        Proposito: Recorre todo el  tablero en busqueda de bolitas color "color" para quitarlas.
        Parametro:
            *color: es el color de las bolitas a quitar de las celdas que las contengan.
        Precondicion: Ninguna.
    */
    while (hayLugarAlNorteYAlEste()){
        VaciarFilaDe_(color)
        UbicarEnSiguienteFila()
    }
    VaciarFilaDe_(color)
}

procedure UbicarEnSiguienteFila(){
    /*
        Proposito: Mueve el cabezal una celda en direccion Norte.
        Precondicion: Ninguna.
    */
    Mover(Norte)
}

function hayLugarAlNorteYAlEste(){  
    return (puedeMover(Norte)&&puedeMover(Este))
}

procedure VaciarFilaDe_(color){
    /*
        Proposito: inspecciona las celdas de la fila actual buscando bolita de color "color"
        para quitar todas.
        Parametros: 
            *color: es el color de las bolitas que se deben quitar.
        Precondicion: Ninguna.
    */
    IrAlBordeOeste()
    InspeccionaLasCeldas(color)
    IrAlBordeOeste()
}

procedure IrAlBordeOeste(){
    /*
        Proposito: Ubica el cabezal en el borde Oeste.
        Precondicion: Ninguna
    */
    IrAlBorde(Oeste)
}

procedure InspeccionaLasCeldas(color){
    /*
        Proposito: Inspecciona las celdas de la fila actual en busqueda de bolitas de color
        "color" y las quita a toda.
        Parametro:
            *color: es el color de las bolita a quitar de la celda.
        Precondicion: Ninguna.
    */
    while  (nohayLugarAlEste()){
        SacarTodas__(color)
        IrUnaCeldaAlEste()
    }
    SacarTodas__(color)
}

procedure IrUnaCeldaAlEste(){
    /*
        Proposito: Mueve el cabeza una celda en dirección Este.
        Precondicion: Ninguna.
    */
    Mover(Este)
}


function nohayLugarAlEste(){
    return (puedeMover(Este))
}


procedure SacarTodas__(color) {
  while (not (nohayBolitasDeColor(color))) {
    Sacar__Bolita(color)
  }
}

procedure Sacar__Bolita(color) {
  Sacar(color)
}

function nohayBolitasDeColor(color) {
  return (nroBolitas(color) == 0)
}


program {
    VaciarTableroDe_(Rojo)
}

//EJERCICIO 6-------------------------------------------------------------------------------------------------------

procedure VaciarFilaDe_HaciaEl_(color, dirección){
    /*
        Proposito: Ubica el cabeza en el borde de la dirección opuesta a "dirección" y luego recorre
        las filas en dirección "dirección", sensando cada celda en busqueda de bolitas color "color". 
        Si hay bolitas de color "color" en la celda actual, las quita a todas ellas.
        Parametros:
            *color: es el color de las bolitas a quitar de las celdas.
            *dirección: es la dirección en la que el cabezal recorrerá las celdas de la fila.
        Precondición: Ninguna.
    */
    IrAlInicioDeLaFila(opuesto(dirección))
    RecorrerYSensarFila(color, dirección)
}

procedure IrAlInicioDeLaFila(dirección){
    /*
        Proposito: Ubica el cabezal en el borde "dirección".
        Parametro:
            *dirección: es la dirección del borde en la que se deberá ubicar el cabezal.
        Precondición: Ninguna
    */
    IrAlBorde(dirección)
}

procedure RecorrerYSensarFila(color, dirección){
    /*
        Proposito: Recorre la fila de celdas en dirección "dirección" buscando bolitas de color 
        "color", para quitar a todas ellas de la celda en la que se ubiquen.
        Parametros:
            *color: es el color de bolitas a quitar de la celda actual.
            dirección: es la dirección en la que va a ser recorrida la fila.
        Precondición: Ninguna
    */
    while (hayLugarAl(dirección)){
        SacarTodas_(color)
        MoverEnDirección_(dirección)
    }
    SacarTodas_(color)
}

procedure SacarTodas_(color){
    /*
        Proposito: Saca todas las bolita de color "color" de la celda actual.
        Parametros: 
            *color: es el color de todas las bolitas que se van a quitar de la celda actual.
        Precondición: Ninguna
    */
    while (hayBolitasColor(color)){
        Sacar(color)
    }
}

procedure MoverEnDirección_(dirección){
    /*
        Proposito: Mueve el cabezal una celda en dirección "dirección"
        Precondición: Ninguna.
    */
}


function hayLugarAl(dirección){
    /*  
        Proposito: Devuelve verdadero si hay una celda en dirección "dirección" desde la celda 
        actual.
        Parametros: 
            *dirección: es el lado lindante de la celda actual, a sensar.
        Describe: Un valor de verdad
        Precondición: Ninguna
    */
    return (puedeMover(dirección))
}

function hayBolitasColor(color){
    /*
        Proposito: Devuelve verdadero si hay bolitas de color "color" en la celda actual.
        Parametros:
            *color: es el color de las bolitas a sensar.
        Describe: Un valor de verdad.
        Precondición: Ninguna
    */
    return (nroBolitas(color)/=0)
}

program {
    VaciarFilaDe_HaciaEl_(Rojo, Este)
}

//EJERCICO 8 
procedure LlevarAlCaminanteALaMeta() {
    /*
        Proposito: Mueve al caminante reiteradas veces hasta ubicarlo en la meta, dejando
        huellas en cada celda por las que pasò.
        Precondiciòn: El caminante se representa con bolitas azules, con una cantidad de 1 a 4, dependiendo hacia donde se
        dirija. Los cambios de direcciòn se representan con la misma cantidad de bolitas, pero de color verde. Debe haber
        cambios de direcciòn que dirigan al caminante hacia la meta y una meta al final del recorrido.
        Observacion: 
            *El caminante se representa con 1 a 4 bolitas azules.
            *El cambio de direcciòn se representa con bolitas de color verde
            *La meta se representa con 1 o màs bolitas rojas.
    */
    while (not(estáEnLaMeta())){
        DejarHuella()
        DarUnPaso()
    }
}

procedure DarUnPaso(){
    /*
        Proposito: Mueve al caminante una vez por celda en la direcciòn correspondiente
        dependiendo si hay o no un indicador de cambio de direcciòn. Si hay un cambio
        de direcciòn, el caminante imitara la cantidad de bolitas que la direcciòn
        indicada, y se movera en esa direcciòn. Si no hay indicador, el caminante
        mantendrà la cantidad de bolitas y seguirà moviendose en la direcciòn en la que
        se dirige.
        Precondicion: El caminante no està en la meta.
        
    */
        CambiarDeDirecciónSiHayIndicador()
        MoverAlCaminanteAl_(direcciónIndicada())
}

procedure CambiarDeDirecciónSiHayIndicador(){
    /*
        Proposito: Analiza si hay un indicador de direcciòn, y en el caso de que lo haya, cambia la direcciòn en la que se mueve
        el caminante, y imita la cantidad de bolitas del indicador.
        Precondicion: Ninguna.
        
    */
    if(hayIndicadorDeCambioDeDirección()){
        Cambiar_ParaImitar_(Azul, Verde)
    }
}

    
function direcciónIndicada(){
    return(alNorte()||alEste()||alSur()||alOeste())
}

function alNorte(){
    return (nroBolitas(indicador())==1)
}

function alEste(){
    return (nroBolitas(indicador())==2)
}

function alSur(){
    return (nroBolitas(indicador())==3)
}

function alOeste(){
    return (nroBolitas(indicador()==4))
}

function estáEnLaMeta(){
    return (hayBolitas(Rojo))
}


procedure Cambiar_ParaImitar_(colorACambiar, colorAImitar){
    /*
        Proposito: 
    */
    repeat(nroBolitas(colorAImitar)){
        Poner(colorACambiar)
    }
    
     
 }

procedure MoverAlCaminanteAl_(dirección){
    Mover_Bolitas_Al_(cantidad, color, dirección)
}


procedure Mover_Bolitas_Al_(cantidad, color, dirección){
    Mover()    
}

procedure DejarHuella(){
    /*
        Proposito: Señala el camino que lleva al caminante a la meta mediante huellas.
        Precondicion: Ninguna.
        Observacion: Una huella se representa con una bolita negra.
    */
    Poner(huella())
}


function hayIndicadorDeCambioDeDirección(){
    return(indicador()>=1 && indicador()<=4))
}

function indicador(){
    return(nroBolitas(Verde))
}

function huella(){
    return (Negro)
}

program {
    LlevarAlCaminanteALaMeta()
}
